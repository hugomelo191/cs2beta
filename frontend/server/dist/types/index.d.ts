import { z } from 'zod';
export declare const UserSchema: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodString;
    username: z.ZodString;
    firstName: z.ZodOptional<z.ZodString>;
    lastName: z.ZodOptional<z.ZodString>;
    avatar: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    country: z.ZodDefault<z.ZodString>;
    role: z.ZodDefault<z.ZodEnum<["user", "admin", "moderator"]>>;
    isVerified: z.ZodDefault<z.ZodBoolean>;
    isActive: z.ZodDefault<z.ZodBoolean>;
    lastLogin: z.ZodOptional<z.ZodDate>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id?: string;
    email?: string;
    username?: string;
    firstName?: string;
    lastName?: string;
    avatar?: string;
    bio?: string;
    country?: string;
    role?: "user" | "admin" | "moderator";
    isActive?: boolean;
    isVerified?: boolean;
    lastLogin?: Date;
    createdAt?: Date;
    updatedAt?: Date;
}, {
    id?: string;
    email?: string;
    username?: string;
    firstName?: string;
    lastName?: string;
    avatar?: string;
    bio?: string;
    country?: string;
    role?: "user" | "admin" | "moderator";
    isActive?: boolean;
    isVerified?: boolean;
    lastLogin?: Date;
    createdAt?: Date;
    updatedAt?: Date;
}>;
export declare const CreateUserSchema: z.ZodObject<{
    email: z.ZodString;
    username: z.ZodString;
    password: z.ZodString;
    firstName: z.ZodOptional<z.ZodString>;
    lastName: z.ZodOptional<z.ZodString>;
    country: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    email?: string;
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    country?: string;
}, {
    email?: string;
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    country?: string;
}>;
export declare const UpdateUserSchema: z.ZodObject<{
    firstName: z.ZodOptional<z.ZodString>;
    lastName: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    username: z.ZodOptional<z.ZodString>;
    password: z.ZodOptional<z.ZodString>;
    avatar: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    country: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    email?: string;
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    avatar?: string;
    bio?: string;
    country?: string;
}, {
    email?: string;
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    avatar?: string;
    bio?: string;
    country?: string;
}>;
export declare const TeamSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    tag: z.ZodString;
    logo: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
    city: z.ZodOptional<z.ZodString>;
    founded: z.ZodOptional<z.ZodNumber>;
    website: z.ZodOptional<z.ZodString>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    achievements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    isActive: z.ZodDefault<z.ZodBoolean>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    country?: string;
    isActive?: boolean;
    createdAt?: Date;
    updatedAt?: Date;
    tag?: string;
    logo?: string;
    banner?: string;
    description?: string;
    city?: string;
    founded?: number;
    website?: string;
    socials?: Record<string, string>;
    achievements?: string[];
}, {
    id?: string;
    name?: string;
    country?: string;
    isActive?: boolean;
    createdAt?: Date;
    updatedAt?: Date;
    tag?: string;
    logo?: string;
    banner?: string;
    description?: string;
    city?: string;
    founded?: number;
    website?: string;
    socials?: Record<string, string>;
    achievements?: string[];
}>;
export declare const CreateTeamSchema: z.ZodObject<{
    name: z.ZodString;
    tag: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
    city: z.ZodOptional<z.ZodString>;
    founded: z.ZodOptional<z.ZodNumber>;
    website: z.ZodOptional<z.ZodString>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    country?: string;
    tag?: string;
    description?: string;
    city?: string;
    founded?: number;
    website?: string;
    socials?: Record<string, string>;
}, {
    name?: string;
    country?: string;
    tag?: string;
    description?: string;
    city?: string;
    founded?: number;
    website?: string;
    socials?: Record<string, string>;
}>;
export declare const UpdateTeamSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    tag: z.ZodOptional<z.ZodString>;
    logo: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    city: z.ZodOptional<z.ZodString>;
    website: z.ZodOptional<z.ZodString>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    achievements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    tag?: string;
    logo?: string;
    banner?: string;
    description?: string;
    city?: string;
    website?: string;
    socials?: Record<string, string>;
    achievements?: string[];
}, {
    name?: string;
    tag?: string;
    logo?: string;
    banner?: string;
    description?: string;
    city?: string;
    website?: string;
    socials?: Record<string, string>;
    achievements?: string[];
}>;
export declare const PlayerSchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodOptional<z.ZodString>;
    teamId: z.ZodOptional<z.ZodString>;
    nickname: z.ZodString;
    realName: z.ZodOptional<z.ZodString>;
    avatar: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
    city: z.ZodOptional<z.ZodString>;
    age: z.ZodOptional<z.ZodNumber>;
    role: z.ZodDefault<z.ZodEnum<["player", "coach", "manager"]>>;
    position: z.ZodOptional<z.ZodEnum<["IGL", "AWP", "Rifler", "Support"]>>;
    bio: z.ZodOptional<z.ZodString>;
    achievements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    stats: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    isActive: z.ZodDefault<z.ZodBoolean>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id?: string;
    avatar?: string;
    bio?: string;
    country?: string;
    role?: "player" | "coach" | "manager";
    isActive?: boolean;
    createdAt?: Date;
    updatedAt?: Date;
    banner?: string;
    city?: string;
    socials?: Record<string, string>;
    achievements?: string[];
    userId?: string;
    teamId?: string;
    nickname?: string;
    realName?: string;
    age?: number;
    position?: "IGL" | "AWP" | "Rifler" | "Support";
    stats?: Record<string, any>;
}, {
    id?: string;
    avatar?: string;
    bio?: string;
    country?: string;
    role?: "player" | "coach" | "manager";
    isActive?: boolean;
    createdAt?: Date;
    updatedAt?: Date;
    banner?: string;
    city?: string;
    socials?: Record<string, string>;
    achievements?: string[];
    userId?: string;
    teamId?: string;
    nickname?: string;
    realName?: string;
    age?: number;
    position?: "IGL" | "AWP" | "Rifler" | "Support";
    stats?: Record<string, any>;
}>;
export declare const CreatePlayerSchema: z.ZodObject<{
    nickname: z.ZodString;
    realName: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
    city: z.ZodOptional<z.ZodString>;
    age: z.ZodOptional<z.ZodNumber>;
    position: z.ZodOptional<z.ZodEnum<["IGL", "AWP", "Rifler", "Support"]>>;
    bio: z.ZodOptional<z.ZodString>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    bio?: string;
    country?: string;
    city?: string;
    socials?: Record<string, string>;
    nickname?: string;
    realName?: string;
    age?: number;
    position?: "IGL" | "AWP" | "Rifler" | "Support";
}, {
    bio?: string;
    country?: string;
    city?: string;
    socials?: Record<string, string>;
    nickname?: string;
    realName?: string;
    age?: number;
    position?: "IGL" | "AWP" | "Rifler" | "Support";
}>;
export declare const UpdatePlayerSchema: z.ZodObject<{
    nickname: z.ZodOptional<z.ZodString>;
    realName: z.ZodOptional<z.ZodString>;
    avatar: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    city: z.ZodOptional<z.ZodString>;
    age: z.ZodOptional<z.ZodNumber>;
    position: z.ZodOptional<z.ZodEnum<["IGL", "AWP", "Rifler", "Support"]>>;
    bio: z.ZodOptional<z.ZodString>;
    achievements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    stats: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    avatar?: string;
    bio?: string;
    banner?: string;
    city?: string;
    socials?: Record<string, string>;
    achievements?: string[];
    nickname?: string;
    realName?: string;
    age?: number;
    position?: "IGL" | "AWP" | "Rifler" | "Support";
    stats?: Record<string, any>;
}, {
    avatar?: string;
    bio?: string;
    banner?: string;
    city?: string;
    socials?: Record<string, string>;
    achievements?: string[];
    nickname?: string;
    realName?: string;
    age?: number;
    position?: "IGL" | "AWP" | "Rifler" | "Support";
    stats?: Record<string, any>;
}>;
export declare const TournamentSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    logo: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    organizer: z.ZodString;
    prizePool: z.ZodOptional<z.ZodNumber>;
    currency: z.ZodDefault<z.ZodString>;
    startDate: z.ZodDate;
    endDate: z.ZodDate;
    registrationDeadline: z.ZodOptional<z.ZodDate>;
    maxTeams: z.ZodOptional<z.ZodNumber>;
    currentTeams: z.ZodDefault<z.ZodNumber>;
    format: z.ZodOptional<z.ZodString>;
    maps: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    rules: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["upcoming", "ongoing", "completed", "cancelled"]>>;
    country: z.ZodOptional<z.ZodString>;
    isFeatured: z.ZodDefault<z.ZodBoolean>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    country?: string;
    createdAt?: Date;
    updatedAt?: Date;
    logo?: string;
    banner?: string;
    description?: string;
    organizer?: string;
    prizePool?: number;
    currency?: string;
    startDate?: Date;
    endDate?: Date;
    registrationDeadline?: Date;
    maxTeams?: number;
    currentTeams?: number;
    format?: string;
    maps?: string[];
    rules?: string;
    status?: "upcoming" | "ongoing" | "completed" | "cancelled";
    isFeatured?: boolean;
}, {
    id?: string;
    name?: string;
    country?: string;
    createdAt?: Date;
    updatedAt?: Date;
    logo?: string;
    banner?: string;
    description?: string;
    organizer?: string;
    prizePool?: number;
    currency?: string;
    startDate?: Date;
    endDate?: Date;
    registrationDeadline?: Date;
    maxTeams?: number;
    currentTeams?: number;
    format?: string;
    maps?: string[];
    rules?: string;
    status?: "upcoming" | "ongoing" | "completed" | "cancelled";
    isFeatured?: boolean;
}>;
export declare const CreateTournamentSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    organizer: z.ZodString;
    startDate: z.ZodDate;
    endDate: z.ZodDate;
    registrationDeadline: z.ZodOptional<z.ZodDate>;
    maxTeams: z.ZodOptional<z.ZodNumber>;
    format: z.ZodString;
    rules: z.ZodOptional<z.ZodString>;
    prizePool: z.ZodOptional<z.ZodNumber>;
    currency: z.ZodString;
    status: z.ZodDefault<z.ZodEnum<["upcoming", "ongoing", "completed", "cancelled"]>>;
    country: z.ZodOptional<z.ZodString>;
    logo: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    isFeatured: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    country?: string;
    logo?: string;
    banner?: string;
    description?: string;
    organizer?: string;
    prizePool?: number;
    currency?: string;
    startDate?: Date;
    endDate?: Date;
    registrationDeadline?: Date;
    maxTeams?: number;
    format?: string;
    rules?: string;
    status?: "upcoming" | "ongoing" | "completed" | "cancelled";
    isFeatured?: boolean;
}, {
    name?: string;
    country?: string;
    logo?: string;
    banner?: string;
    description?: string;
    organizer?: string;
    prizePool?: number;
    currency?: string;
    startDate?: Date;
    endDate?: Date;
    registrationDeadline?: Date;
    maxTeams?: number;
    format?: string;
    rules?: string;
    status?: "upcoming" | "ongoing" | "completed" | "cancelled";
    isFeatured?: boolean;
}>;
export declare const UpdateTournamentSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    organizer: z.ZodOptional<z.ZodString>;
    startDate: z.ZodOptional<z.ZodDate>;
    endDate: z.ZodOptional<z.ZodDate>;
    registrationDeadline: z.ZodOptional<z.ZodDate>;
    maxTeams: z.ZodOptional<z.ZodNumber>;
    format: z.ZodOptional<z.ZodString>;
    rules: z.ZodOptional<z.ZodString>;
    prizePool: z.ZodOptional<z.ZodNumber>;
    currency: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["upcoming", "ongoing", "completed", "cancelled"]>>;
    country: z.ZodOptional<z.ZodString>;
    logo: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    isFeatured: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    country?: string;
    logo?: string;
    banner?: string;
    description?: string;
    organizer?: string;
    prizePool?: number;
    currency?: string;
    startDate?: Date;
    endDate?: Date;
    registrationDeadline?: Date;
    maxTeams?: number;
    format?: string;
    rules?: string;
    status?: "upcoming" | "ongoing" | "completed" | "cancelled";
    isFeatured?: boolean;
}, {
    name?: string;
    country?: string;
    logo?: string;
    banner?: string;
    description?: string;
    organizer?: string;
    prizePool?: number;
    currency?: string;
    startDate?: Date;
    endDate?: Date;
    registrationDeadline?: Date;
    maxTeams?: number;
    format?: string;
    rules?: string;
    status?: "upcoming" | "ongoing" | "completed" | "cancelled";
    isFeatured?: boolean;
}>;
export declare const NewsSchema: z.ZodObject<{
    id: z.ZodString;
    title: z.ZodString;
    excerpt: z.ZodOptional<z.ZodString>;
    content: z.ZodString;
    author: z.ZodString;
    image: z.ZodOptional<z.ZodString>;
    category: z.ZodEnum<["tournament", "team", "player", "general"]>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    views: z.ZodDefault<z.ZodNumber>;
    readTime: z.ZodOptional<z.ZodNumber>;
    isPublished: z.ZodDefault<z.ZodBoolean>;
    isFeatured: z.ZodDefault<z.ZodBoolean>;
    publishedAt: z.ZodOptional<z.ZodDate>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    isFeatured?: boolean;
    title?: string;
    excerpt?: string;
    content?: string;
    author?: string;
    image?: string;
    category?: "player" | "team" | "tournament" | "general";
    tags?: string[];
    views?: number;
    readTime?: number;
    isPublished?: boolean;
    publishedAt?: Date;
}, {
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    isFeatured?: boolean;
    title?: string;
    excerpt?: string;
    content?: string;
    author?: string;
    image?: string;
    category?: "player" | "team" | "tournament" | "general";
    tags?: string[];
    views?: number;
    readTime?: number;
    isPublished?: boolean;
    publishedAt?: Date;
}>;
export declare const CreateNewsSchema: z.ZodObject<{
    title: z.ZodString;
    excerpt: z.ZodOptional<z.ZodString>;
    content: z.ZodString;
    author: z.ZodString;
    category: z.ZodEnum<["tournament", "team", "player", "general"]>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    readTime: z.ZodOptional<z.ZodNumber>;
    isPublished: z.ZodDefault<z.ZodBoolean>;
    isFeatured: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    isFeatured?: boolean;
    title?: string;
    excerpt?: string;
    content?: string;
    author?: string;
    category?: "player" | "team" | "tournament" | "general";
    tags?: string[];
    readTime?: number;
    isPublished?: boolean;
}, {
    isFeatured?: boolean;
    title?: string;
    excerpt?: string;
    content?: string;
    author?: string;
    category?: "player" | "team" | "tournament" | "general";
    tags?: string[];
    readTime?: number;
    isPublished?: boolean;
}>;
export declare const UpdateNewsSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    excerpt: z.ZodOptional<z.ZodString>;
    content: z.ZodOptional<z.ZodString>;
    author: z.ZodOptional<z.ZodString>;
    image: z.ZodOptional<z.ZodString>;
    category: z.ZodOptional<z.ZodEnum<["tournament", "team", "player", "general"]>>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    readTime: z.ZodOptional<z.ZodNumber>;
    isPublished: z.ZodOptional<z.ZodBoolean>;
    isFeatured: z.ZodOptional<z.ZodBoolean>;
    publishedAt: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    isFeatured?: boolean;
    title?: string;
    excerpt?: string;
    content?: string;
    author?: string;
    image?: string;
    category?: "player" | "team" | "tournament" | "general";
    tags?: string[];
    readTime?: number;
    isPublished?: boolean;
    publishedAt?: Date;
}, {
    isFeatured?: boolean;
    title?: string;
    excerpt?: string;
    content?: string;
    author?: string;
    image?: string;
    category?: "player" | "team" | "tournament" | "general";
    tags?: string[];
    readTime?: number;
    isPublished?: boolean;
    publishedAt?: Date;
}>;
export declare const CasterSchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    type: z.ZodEnum<["caster", "streamer"]>;
    specialty: z.ZodOptional<z.ZodString>;
    avatar: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
    languages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    followers: z.ZodDefault<z.ZodNumber>;
    rating: z.ZodDefault<z.ZodNumber>;
    experience: z.ZodOptional<z.ZodString>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    isLive: z.ZodDefault<z.ZodBoolean>;
    currentGame: z.ZodOptional<z.ZodString>;
    isActive: z.ZodDefault<z.ZodBoolean>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    avatar?: string;
    bio?: string;
    country?: string;
    isActive?: boolean;
    createdAt?: Date;
    updatedAt?: Date;
    banner?: string;
    socials?: Record<string, string>;
    userId?: string;
    type?: "caster" | "streamer";
    specialty?: string;
    languages?: string[];
    followers?: number;
    rating?: number;
    experience?: string;
    isLive?: boolean;
    currentGame?: string;
}, {
    id?: string;
    name?: string;
    avatar?: string;
    bio?: string;
    country?: string;
    isActive?: boolean;
    createdAt?: Date;
    updatedAt?: Date;
    banner?: string;
    socials?: Record<string, string>;
    userId?: string;
    type?: "caster" | "streamer";
    specialty?: string;
    languages?: string[];
    followers?: number;
    rating?: number;
    experience?: string;
    isLive?: boolean;
    currentGame?: string;
}>;
export declare const CreateCasterSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodEnum<["caster", "streamer"]>;
    specialty: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
    languages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    experience: z.ZodOptional<z.ZodString>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    bio?: string;
    country?: string;
    socials?: Record<string, string>;
    type?: "caster" | "streamer";
    specialty?: string;
    languages?: string[];
    experience?: string;
}, {
    name?: string;
    bio?: string;
    country?: string;
    socials?: Record<string, string>;
    type?: "caster" | "streamer";
    specialty?: string;
    languages?: string[];
    experience?: string;
}>;
export declare const UpdateCasterSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    specialty: z.ZodOptional<z.ZodString>;
    avatar: z.ZodOptional<z.ZodString>;
    banner: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    languages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    followers: z.ZodOptional<z.ZodNumber>;
    rating: z.ZodOptional<z.ZodNumber>;
    experience: z.ZodOptional<z.ZodString>;
    socials: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    isLive: z.ZodOptional<z.ZodBoolean>;
    currentGame: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    avatar?: string;
    bio?: string;
    banner?: string;
    socials?: Record<string, string>;
    specialty?: string;
    languages?: string[];
    followers?: number;
    rating?: number;
    experience?: string;
    isLive?: boolean;
    currentGame?: string;
}, {
    name?: string;
    avatar?: string;
    bio?: string;
    banner?: string;
    socials?: Record<string, string>;
    specialty?: string;
    languages?: string[];
    followers?: number;
    rating?: number;
    experience?: string;
    isLive?: boolean;
    currentGame?: string;
}>;
export declare const DraftSchema: z.ZodObject<{
    id: z.ZodString;
    title: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    tournamentId: z.ZodOptional<z.ZodString>;
    organizerId: z.ZodString;
    maxTeams: z.ZodNumber;
    currentTeams: z.ZodDefault<z.ZodNumber>;
    startDate: z.ZodDate;
    endDate: z.ZodDate;
    status: z.ZodDefault<z.ZodEnum<["open", "in_progress", "completed", "cancelled"]>>;
    requirements: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    isPublic: z.ZodDefault<z.ZodBoolean>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    startDate?: Date;
    endDate?: Date;
    maxTeams?: number;
    currentTeams?: number;
    status?: "open" | "completed" | "cancelled" | "in_progress";
    title?: string;
    tournamentId?: string;
    organizerId?: string;
    requirements?: Record<string, any>;
    isPublic?: boolean;
}, {
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    description?: string;
    startDate?: Date;
    endDate?: Date;
    maxTeams?: number;
    currentTeams?: number;
    status?: "open" | "completed" | "cancelled" | "in_progress";
    title?: string;
    tournamentId?: string;
    organizerId?: string;
    requirements?: Record<string, any>;
    isPublic?: boolean;
}>;
export declare const CreateDraftSchema: z.ZodObject<{
    title: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    tournamentId: z.ZodOptional<z.ZodString>;
    maxTeams: z.ZodNumber;
    startDate: z.ZodDate;
    endDate: z.ZodDate;
    requirements: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    isPublic: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    description?: string;
    startDate?: Date;
    endDate?: Date;
    maxTeams?: number;
    title?: string;
    tournamentId?: string;
    requirements?: Record<string, any>;
    isPublic?: boolean;
}, {
    description?: string;
    startDate?: Date;
    endDate?: Date;
    maxTeams?: number;
    title?: string;
    tournamentId?: string;
    requirements?: Record<string, any>;
    isPublic?: boolean;
}>;
export declare const UpdateDraftSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    maxTeams: z.ZodOptional<z.ZodNumber>;
    startDate: z.ZodOptional<z.ZodDate>;
    endDate: z.ZodOptional<z.ZodDate>;
    status: z.ZodOptional<z.ZodEnum<["open", "in_progress", "completed", "cancelled"]>>;
    requirements: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    isPublic: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    description?: string;
    startDate?: Date;
    endDate?: Date;
    maxTeams?: number;
    status?: "open" | "completed" | "cancelled" | "in_progress";
    title?: string;
    requirements?: Record<string, any>;
    isPublic?: boolean;
}, {
    description?: string;
    startDate?: Date;
    endDate?: Date;
    maxTeams?: number;
    status?: "open" | "completed" | "cancelled" | "in_progress";
    title?: string;
    requirements?: Record<string, any>;
    isPublic?: boolean;
}>;
export declare const LoginSchema: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    email?: string;
    password?: string;
}, {
    email?: string;
    password?: string;
}>;
export declare const RegisterSchema: z.ZodObject<{
    email: z.ZodString;
    username: z.ZodString;
    password: z.ZodString;
    firstName: z.ZodOptional<z.ZodString>;
    lastName: z.ZodOptional<z.ZodString>;
    country: z.ZodDefault<z.ZodString>;
    nickname: z.ZodString;
    realName: z.ZodOptional<z.ZodString>;
    age: z.ZodOptional<z.ZodNumber>;
    position: z.ZodOptional<z.ZodEnum<["IGL", "AWP", "Rifler", "Support"]>>;
    bio: z.ZodOptional<z.ZodString>;
    faceitNickname: z.ZodString;
    socials: z.ZodOptional<z.ZodObject<{
        steam: z.ZodOptional<z.ZodString>;
        discord: z.ZodOptional<z.ZodString>;
        twitter: z.ZodOptional<z.ZodString>;
        instagram: z.ZodOptional<z.ZodString>;
        twitch: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        steam?: string;
        discord?: string;
        twitter?: string;
        instagram?: string;
        twitch?: string;
    }, {
        steam?: string;
        discord?: string;
        twitter?: string;
        instagram?: string;
        twitch?: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    email?: string;
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    bio?: string;
    country?: string;
    socials?: {
        steam?: string;
        discord?: string;
        twitter?: string;
        instagram?: string;
        twitch?: string;
    };
    nickname?: string;
    realName?: string;
    age?: number;
    position?: "IGL" | "AWP" | "Rifler" | "Support";
    faceitNickname?: string;
}, {
    email?: string;
    username?: string;
    password?: string;
    firstName?: string;
    lastName?: string;
    bio?: string;
    country?: string;
    socials?: {
        steam?: string;
        discord?: string;
        twitter?: string;
        instagram?: string;
        twitch?: string;
    };
    nickname?: string;
    realName?: string;
    age?: number;
    position?: "IGL" | "AWP" | "Rifler" | "Support";
    faceitNickname?: string;
}>;
export declare const ApiResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    message: z.ZodString;
    data: z.ZodOptional<z.ZodAny>;
    error: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    data?: any;
    message?: string;
    error?: string;
    success?: boolean;
}, {
    data?: any;
    message?: string;
    error?: string;
    success?: boolean;
}>;
export declare const PaginatedResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    data: z.ZodArray<z.ZodAny, "many">;
    pagination: z.ZodObject<{
        page: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
        pages: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        limit?: number;
        page?: number;
        total?: number;
        pages?: number;
    }, {
        limit?: number;
        page?: number;
        total?: number;
        pages?: number;
    }>;
}, "strip", z.ZodTypeAny, {
    data?: any[];
    success?: boolean;
    pagination?: {
        limit?: number;
        page?: number;
        total?: number;
        pages?: number;
    };
}, {
    data?: any[];
    success?: boolean;
    pagination?: {
        limit?: number;
        page?: number;
        total?: number;
        pages?: number;
    };
}>;
export type User = z.infer<typeof UserSchema>;
export type CreateUser = z.infer<typeof CreateUserSchema>;
export type UpdateUser = z.infer<typeof UpdateUserSchema>;
export type Team = z.infer<typeof TeamSchema>;
export type CreateTeam = z.infer<typeof CreateTeamSchema>;
export type UpdateTeam = z.infer<typeof UpdateTeamSchema>;
export type Player = z.infer<typeof PlayerSchema>;
export type CreatePlayer = z.infer<typeof CreatePlayerSchema>;
export type UpdatePlayer = z.infer<typeof UpdatePlayerSchema>;
export type Tournament = z.infer<typeof TournamentSchema>;
export type CreateTournament = z.infer<typeof CreateTournamentSchema>;
export type UpdateTournament = z.infer<typeof UpdateTournamentSchema>;
export type News = z.infer<typeof NewsSchema>;
export type CreateNews = z.infer<typeof CreateNewsSchema>;
export type UpdateNews = z.infer<typeof UpdateNewsSchema>;
export type Caster = z.infer<typeof CasterSchema>;
export type CreateCaster = z.infer<typeof CreateCasterSchema>;
export type UpdateCaster = z.infer<typeof UpdateCasterSchema>;
export type Draft = z.infer<typeof DraftSchema>;
export type CreateDraft = z.infer<typeof CreateDraftSchema>;
export type UpdateDraft = z.infer<typeof UpdateDraftSchema>;
export type Login = z.infer<typeof LoginSchema>;
export type Register = z.infer<typeof RegisterSchema>;
export type ApiResponse = z.infer<typeof ApiResponseSchema>;
export type PaginatedResponse = z.infer<typeof PaginatedResponseSchema>;
//# sourceMappingURL=index.d.ts.map